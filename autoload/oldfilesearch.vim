scriptencoding utf-8
" vim: set fdm=marker foldlevel=0:

function! s:OpenMRUFile(command) abort  "{{{1
	" Opens a file in the list of most-recently edited files generated by
	" s:NoFile().
    let l:file = getline('.')
	if len(tabpagebuflist()) > 1
		quit
	endif
	try
		let [l:filename, l:filepath] = split(l:file, ' || ')
	catch /E688/
		echohl Error
		echom "No file selected! Hit 'q' to quit or 'u' to undo last search."
		echohl None
		return
	endtry
	execute a:command fnamemodify(fnameescape(l:filepath . '/' . l:filename), ':p')
	set nocursorline
endfunction
"}}}
function! s:FilterFiles(idx, val) abort  "{{{1
	return a:val =~ s:query
endfunction
"}}}
function! s:MRUSearch() abort  "{{{1
	let l:saveSearch = @/
	let l:saveHLS = &hlsearch
	let @/ = ''
	set hlsearch
	let l:text = getline(1, '$')
	let l:queryText = ''
	setlocal modifiable
	" Make a change to start the undoable change
	execute "normal! i \<BS>"
	while 1
		redraw
		echo 'search>' . l:queryText
		let l:char = getchar()
		if l:char == 27                 " <ESC>
			undojoin | call setline(1, l:text)
			setlocal nomodifiable
			redraw
			break
		elseif l:char ==? "\<BS>"
			let l:queryText = l:queryText[:-2]
		elseif l:char == 13             " <CR>
			setlocal nomodifiable
			redraw
			break
		else
			let l:queryText .= nr2char(l:char)
		endif
		let l:filteredText = deepcopy(l:text)
		let l:queryList = split(l:queryText, ' ')
		for s:query in l:queryList
			let l:filteredText = filter(l:filteredText, function('<SID>FilterFiles'))
		endfor
		undojoin | 0,$delete_
		undojoin | call setline(1, l:filteredText)
		let l:strippedQuery = substitute(l:queryText, ' $', '', '')  " strip trailing space
		let @/ = substitute(l:strippedQuery, ' ', '\\|', 'g')
	endwhile
	let @/ = l:saveSearch
	let &hlsearch = l:saveHLS
	redraw
endfunction
"}}}
function! s:MRUDelete() abort  "{{{1
	let l:file = getline('.')
	let [l:filename, l:filepath] = split(l:file, ' || ')
	let l:file = fnamemodify(l:filepath . '/' . l:filename, ':~')
	let l:file = substitute(l:file, '/', '\\/', 'g')
	let l:file = substitute(l:file, '\~', '\\\~', 'g')
	let l:file = substitute(l:file, '\.', '\\.', 'g')
	" Now need to search in `~/.viminfo` or `~/.nviminfo` for relevant lines
	" and delete them.
	if has('nvim')
		"split ~/.nviminfo
		echoerr 'Not working yet'
		return
	else
		split ~/.viminfo
		try
			execute '%s/^> ' . l:file . '\(\n[^>]*\)*//g'
		endtry
		wq
		setlocal modifiable
		delete_
		setlocal nomodifiable
	endif
endfunction
"}}}
function! s:MRUUndo() abort  "{{{1
	setlocal modifiable
	undo
	setlocal nomodifiable
endfunction
"}}}
function! s:MRURedo() abort  "{{{1
	setlocal modifiable
	redo
	setlocal nomodifiable
endfunction
"}}}
function! oldfilesearch#MRUList() abort  "{{{1
	" Creates list of most recently edited files in new window
	if bufname('%') == '' && getbufvar('%', '&mod') == 0
		" if unnamed buffer that's not modified
		new +setlocal\ buftype=nofile\ nowrap\ filetype=none\ nospell\ cursorline
		only
	else
		belowright new +setlocal\ buftype=nofile\ nowrap\ filetype=none\ nospell\ cursorline
	endif
	" TODO: Need to un-highlight these when exiting the oldfile buffer!
	highlight link FileName Identifier
	highlight link FilePath Comment
	call matchadd('FileName', '^.\{-}\ze || ', -1)
	call matchadd('FilePath', '^.\{-} || \zs.*', -1)
	0put =v:oldfiles
	" Break undo sequence
	execute "normal! i\<C-G>u\<Esc>"
	" Remove netrw and fugitive files
	silent global/\/runtime\/doc/delete_
	if g:OldFileSearch_netrw == 1
		silent global/\[BufExplorer\]/delete_
	endif
	if g:OldFileSearch_fugitive == 1
		silent global/|| fugitive:\/\//delete_
	endif
	let l:text = getline(1, '$')
	let l:count = 0
    " Reformat files (thowing out those that aren't readable)
	for l:line in l:text
        let l:line = fnamemodify(l:line, ':p')
        if filereadable(l:line)
            let l:path = fnamemodify(l:line, ':~:h')
            let l:filename = fnamemodify(l:line, ':t')
            let l:count += 1
            call setline(l:count, l:filename . ' || ' . l:path)
        else
            execute l:count + 1 . 'delete_'
        endif
	endfor
    " Break undo sequence
	execute "normal! i\<C-G>u\<Esc>"
    " Remove typically unwanted files
	if g:OldFileSearch_dotfiles == 1
		" dot files ...
		silent global/^\./delete_
		silent global/\(|| \|\/\)\./delete_
	endif
	if g:OldFileSearch_helpfiles == 1
		" help files ... (Note: these are covered by dot files....)
		silent global/\S*\.txt || .*\/doc$/delete_
	endif
	if g:OldFileSearch_remotefiles == 1
		" remote files ...
		silent global/|| scp:\/\//delete_
	endif
	" blank lines ...
	silent global/^$/delete_
	execute "normal! gg\<C-W>K"
	setlocal nomodifiable
	nnoremap <silent> <buffer> <CR> :call <SID>OpenMRUFile('edit')<CR>
    nnoremap <silent> <buffer> s :call <SID>OpenMRUFile('split')<CR>
    nnoremap <silent> <buffer> t :call <SID>OpenMRUFile('tabedit')<CR>
	nnoremap <silent> <buffer> v :call <SID>OpenMRUFile('belowright vsplit')<CR>
	nnoremap <silent> <buffer> q ZQ
	nnoremap <buffer> / :call <SID>MRUSearch()<CR>
	nnoremap <buffer> D :call <SID>MRUDelete()<CR>
	nnoremap <buffer> u :call <SID>MRUUndo()<CR>
	nnoremap <buffer> <C-R> :call <SID>MRURedo()<CR>
endfunction
"}}}
