scriptencoding utf-8
" vim: set fdm=marker foldlevel=0:

function! s:OpenMRUFile(command)  "{{{1
	" Opens a file in the list of most-recently edited files generated by
	" s:NoFile().
    let l:file = getline('.')
	if len(tabpagebuflist()) > 1
		q
	endif
	let [l:filename, l:filepath] = split(l:file, ' || ')
    execute a:command fnamemodify(fnameescape(l:filepath . '/' . l:filename), ':p')
	set nocursorline
endfunction
"}}}
function! s:FilterFiles(idx, val)  "{{{1
	return a:val =~ s:query
endfunction
"}}}
function! s:MRUSearch()  "{{{1
	let l:saveSearch = @/
	let l:saveHLS = &hlsearch
	let @/ = ''
	set hlsearch
	let l:text = getline(1, '$')
	let l:queryText = ''
	" Make a change to start the undoable change
	normal i<Esc>
	while 1
		redraw
		echo 'search>' . l:queryText
		let l:char = getchar()
		if l:char == 27                 " <ESC>
			undojoin | call setline(1, l:text)
			break
		elseif l:char ==? "\<BS>"
			let l:queryText = l:queryText[:-2]
		elseif l:char == 13             " <CR>
			break
		else
			let l:queryText .= nr2char(l:char)
		endif
		let l:filteredText = deepcopy(l:text)
		let l:queryList = split(l:queryText, ' ')
		for s:query in l:queryList
			let l:filteredText = filter(l:filteredText, function('<SID>FilterFiles'))
		endfor
		undojoin | normal! ggdG
		undojoin | call setline(1, l:filteredText)
		let l:strippedQuery = substitute(l:queryText, ' $', '', '')  " strip trailing space
		let @/ = substitute(l:strippedQuery, ' ', '\\|', 'g')
		redraw
	endwhile
	let @/ = l:saveSearch
	let &hlsearch = l:saveHLS
	redraw
endfunction
"}}}
function! oldfilesearch#MRUList()  "{{{1
	" Creates list of most recently edited files in new window
	if !exists('b:newFile')
		" b:newFile should be defined via autocmd on BufNewFile, and undefined
		" on BufWritePost or BufReadPost. In short, overwrite new, empty
		" buffers.
		belowright new +setlocal\ buftype=nofile
	else
		new +setlocal\ buftype=nofile
		only
	endif
	set nowrap
	set filetype=none
	setlocal nospell
	set cursorline
	highlight link FileName Identifier
	highlight link FilePath Comment
	call matchadd('FileName', '^.\{-}\ze || ', -1)
	call matchadd('FilePath', '^.\{-} || \zs.*', -1)
	0put =v:oldfiles
	" Break undo sequence
	execute "normal! i\<C-G>u\<Esc>"
	" Remove netrw and fugitive files
	silent global/\/runtime\/doc/d
	if g:OldFileSearch_netrw == 1
		silent global/\[BufExplorer\]/d
	endif
	if g:OldFileSearch_fugitive == 1
		silent global/|| fugitive:\/\//d
	endif
	let l:text = getline(1, '$')
	let l:count = 0
    " Reformat files (thowing out those that aren't readable)
	for l:line in l:text
        let l:line = fnamemodify(l:line, ':p')
        if filereadable(l:line)
            let l:path = fnamemodify(l:line, ':~:h')
            let l:filename = fnamemodify(l:line, ':t')
            let l:count += 1
            call setline(l:count, l:filename . ' || ' . l:path)
        else
            execute l:count + 1 . 'delete'
        endif
	endfor
    " Break undo sequence
	execute "normal! i\<C-G>u\<Esc>"
    " Remove typically unwanted files
	if g:OldFileSearch_dotfiles == 1
		" dot files ...
		silent global/\(|| \|\/\)\./d
	endif
	if g:OldFileSearch_helpfiles == 1
		" help files ... (Note: these are covered by dot files....)
		silent global/\S*\.txt || .*\/doc$/d
	endif
	if g:OldFileSearch_remotefiles == 1
		" remote files ...
		silent global/|| scp:\/\//d
	endif
	" blank lines ...
	silent global/^$/d
	normal! gg
	nnoremap <silent> <buffer> <CR> :call <SID>OpenMRUFile('edit')<CR>
    nnoremap <silent> <buffer> s :call <SID>OpenMRUFile('belowright split')<CR>
    nnoremap <silent> <buffer> t :call <SID>OpenMRUFile('tabedit')<CR>
	nnoremap <silent> <buffer> v :call <SID>OpenMRUFile('belowright vsplit')<CR>
	nnoremap <silent> <buffer> q ZQ
	nnoremap <buffer> / :call <SID>MRUSearch()<CR>
endfunction
"}}}
